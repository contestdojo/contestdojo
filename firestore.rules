rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function userRef() {
      return /databases/$(database)/documents/users/$(request.auth.uid);
    }

    function isGlobalAdmin() {
      return get(userRef()).data.type == "admin";
    }

    function orgRef(id) {
      return /databases/$(database)/documents/orgs/$(id);
    }

    function isOrgAdminOf(orgRef) {
      return userRef() == get(orgRef).data.admin;
    }

    match /{document=**} {
      allow read, write: if false;

      match /students/{studentId} {
        allow read: if request.auth != null;
      }
    }

    match /orgs/{orgId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if isGlobalAdmin() || userRef() == resource.data.admin;
    }

    match /users/{userId} {
      // Make sure can't change type
      allow read: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId && request.resource.data.type != "admin";
      allow update: if request.auth.uid == userId && resource.data.type == request.resource.data.type
    }

    match /events/{eventId} {
      allow read: if request.auth != null;
      allow create: if false;
      allow update, delete: if userRef() in get(resource.data.owner).data.admins;

      function eventRef() {
        return /databases/$(database)/documents/events/$(eventId);
      }

      function isEventAdmin() {
        return userRef() in get(get(eventRef()).data.owner).data.admins;
      }

      function notFrozenAnd(cond) {
        return !get(eventRef()).data.frozen && cond;
      }

      function notFrozenOr(cond) {
        return !get(eventRef()).data.frozen || cond;
      }

      function studentRef(id) {
        return /databases/$(database)/documents/events/$(eventId)/students/$(id);
      }

      function teamRef(id) {
        return /databases/$(database)/documents/events/$(eventId)/teams/$(id);
      }

      match /orgs/{orgId} {
        allow read: if request.auth != null;
        allow write: if isEventAdmin() || notFrozenAnd(isOrgAdminOf(orgRef(orgId)));
      }

      match /teams/{teamId} {
        allow read: if request.auth != null;
        allow create: if isEventAdmin() || notFrozenAnd(isOrgAdminOf(request.resource.data.org));
        allow update, delete: if isEventAdmin() || notFrozenAnd(isOrgAdminOf(resource.data.org) && isOrgAdminOf(request.resource.data.org));
      }

      match /students/{studentId} {
        allow read: if request.auth != null;
        allow create: if isEventAdmin() || notFrozenAnd(isOrgAdminOf(request.resource.data.org));
        allow update, delete: if (
          isEventAdmin()
          || (
            (isOrgAdminOf(resource.data.org) || userRef() == resource.data.user)
            && notFrozenOr(resource.data.team == request.resource.data.team)
            && (
              !("started" in resource.data)
              || !resource.data.started
              || (
                resource.data.test1 == request.resource.data.test1
                && resource.data.test2 == request.resource.data.test2
              )
            )
          )
        );
      }

      match /tests/{testId} {
        allow read: if request.auth != null || resource.data.type == "guts";
        allow write: if isEventAdmin();

        match /submissions/{submissionId} {
          function ownsSubmission() {
            return request.auth.uid == submissionId || get(studentRef(request.auth.uid)).data.team == teamRef(submissionId)
          }
          allow read: if isEventAdmin() || ownsSubmission();
          allow update: if isEventAdmin() || (ownsSubmission() && request.time < resource.data.endTime && resource.data.endTime == request.resource.data.endTime);
          allow create, delete: if isEventAdmin();
        }

        match /graded/{submissionId} {
          allow read: if isEventAdmin() || get(/databases/$(database)/documents/events/$(eventId)/tests/$(testId)).data.type == "guts";
          allow write: if false;
        }

        match /private/problems {
          allow read: if (
            isEventAdmin()
            || exists(/databases/$(database)/documents/events/$(eventId)/tests/$(testId)/submissions/$(request.auth.uid))
            || exists(/databases/$(database)/documents/events/$(eventId)/tests/$(testId)/submissions/$(get(get(studentRef(request.auth.uid)).data.team).id))
          );
          allow write: if isEventAdmin();
        }

        match /private/answers {
          allow read, write: if isEventAdmin();
        }
      }
    }

    match /entities/{entityId} {
      allow read: if request.auth != null;
      allow create: if false;
      allow update, delete: if userRef() in resource.data.admins;
    }
  }
}